#include<stdio.h>
#include<string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int ctrlC=0, status=1, j;

void shellLoop(void);

char **splitLine(char *line);

char *readLine();

int executeLine(char **args);

int shellExit();

int shellCd(char **args);

int builtIn(char **args);

void ctrlC_handler(int sig);

int shellPipe(char **args);

int shellRedirect(char **args);

int main(void)
{
	signal(2,ctrlC_handler);
	shellLoop();
	
	return 0;
}

void shellLoop(void)
{
	char *line;
	char **args;

	do
	{
		printf("> ");
		line=readLine();
		if(status==0)
			break;
		args=splitLine(line);
		status=shellPipe(args);
		free(line);
		free(args);
	}
	while(status);
}

char *readLine(void)
{
	char *buffer=malloc(1024);
	if (!fgets(buffer, 1024, stdin))
		status=0;

	return buffer; 
}


char **splitLine(char *line)
{
	int n=2;
	j=0;
	char *token;
	char **tokens=malloc(sizeof(char*)*5);
	token=strtok(line, " \n");
	do
	{
		if(j>sizeof(tokens))
		tokens=realloc(tokens, sizeof(char*)*n);
		n++;
		tokens[j]=token;
		j++;
		token=strtok(NULL, " \n");
	}
	while(token!=NULL);
	tokens[j] = NULL;
	return tokens;
}

int executeLine(char **args)
{
	pid_t pid, wpid;
  	int status;
		
	pid = fork();
	if (pid == 0) 
	{
    	// Child process
    		if (execvp(args[0], args) == -1) 
		{
			perror("lsh");
		}
    		exit(EXIT_FAILURE);
  	} 
   	else 
	{
	    // Parent process
		do 
		{
			wpid = waitpid(pid, &status, WUNTRACED);
		} 
		while (!WIFEXITED(status) && !WIFSIGNALED(status) && ctrlC==0);
	}
	ctrlC=0;
	return 1;
}

int shellCd(char **args)
{
	if (args[1] == NULL) 
	{
		fprintf(stderr, "lsh: expected argument to \"cd\"\n");
  	} 
	else 
	{
    		if (chdir(args[1]) != 0) 
		{
	      		perror("lsh");
   		}
  	}
  return 1;
}

int shellExit()
{
	return 0;
}

int builtIn(char **args)
{
	if(args[0]!=NULL)
	{
		if(strcmp(args[0], "cd")==0)
		{
			(shellCd(args));
			return 1;
		}
		else if(strcmp(args[0], "exit")==0)
		{
			return shellExit();
		}
	}

	return executeLine(args);
}

void ctrlC_handler(int sig)
{
	if(sig==2)
	{
		ctrlC=1;
	}
}

int shellPipe(char **args)
{
	int i, t2, t1, position=-1;

	int pipefd[2];

	char **args1=malloc(j), **args2=malloc(j);


	for(i=0;i<j;i++)
	{
		if(strcmp(args[i],"|")==0)
		{
			position=i;
			break;
		}
	}

	if(position==-1)
	{
		return builtIn(args);
	}

	for(i=0;i<position;i++)
	{
		args1[i]=args[i];
	}
	args1[i]=NULL;

	for(i=position+1;i<j;i++)
	{
		args2[i-position-1]=args[i];
	}
	args2[i]=NULL;

	int pd[2];
        pipe(pd);

        if (!fork()) {
            dup2(pd[1], 1); // remap output back to parent
            execvp(args1[0], args1);
            perror("exec");
        }

        // remap output from previous child to input
        dup2(pd[0], 0);
        close(pd[1]);


	    execvp(args2[0], args2);
	    perror("exec");
	
	free(args1);
	free(args2);

	return 1;
}
























